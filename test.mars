
attr Node {
	static new = function(val) => {
		val
		prev = none
		next = none
	}
}

attr List {

	static new = function() => {
		head = none
		:: List
	}

	push(val) {
		if self.head == none {
			let new = Node.new(val)
			self.head = new
			return
		}

		let last = self.head
		loop {
			if last.next == none { break }
			last = last.next
		}
		let new = Node.new(val);
		new.prev = last
		last.next = new
	}

	to_string() {
		let str = '['
		let cur = self.head
		loop {
			if cur == none { break }
			str += cur.val
			if cur.next != none { str += ', ' }
			cur = cur.next
		}
		str += ']'
		return str
	}

}

let list = List.new()

list.push(9)
list.push(23)
list.push(12)
list.push(-5)

writeline(list)
